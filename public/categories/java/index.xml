<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>java on Technical Blog</title>
    <link>https://suchismita-deb.github.io/categories/java/</link>
    <description>Recent content in java on Technical Blog</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Tue, 29 Oct 2024 13:51:06 +0530</lastBuildDate>
    <atom:link href="https://suchismita-deb.github.io/categories/java/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Practice Java</title>
      <link>https://suchismita-deb.github.io/post/java/interviewquestion/practice/</link>
      <pubDate>Tue, 29 Oct 2024 13:51:06 +0530</pubDate>
      <guid>https://suchismita-deb.github.io/post/java/interviewquestion/practice/</guid>
      <description>Design Pattern. Behavoiral, Creational and Structural.
Creational Behavioral Structural Singleton Template Adapter Builder Mediator Composite Factory Chain of Responsibility Proxy Abstract Factory Observer Flyweight Prototype Strategy Facade Command Bridge State Decorator Visitor Interpreter Iterator Memento Creational Design Pattern. Singleton Design Pattern - A design pattern that allows you to ensure that a class has only one instance while providing a global access point to the instance.
Builder Design Pattern - It simplifies the creation of complex objects by breaking the creation process into steps.</description>
    </item>
    <item>
      <title>Pattern Microservice Important</title>
      <link>https://suchismita-deb.github.io/post/java/interviewquestion/microservice/patternmicroserviceimportant/</link>
      <pubDate>Thu, 19 Sep 2024 20:45:41 +0530</pubDate>
      <guid>https://suchismita-deb.github.io/post/java/interviewquestion/microservice/patternmicroserviceimportant/</guid>
      <description>Types of Coupling. Types Description Content Coupling One class can access the private member of another class. Java does not allow. Common Coupling Two classes access the same shared data that is the global variable and static properties. Control Coupling When a function controls the flow of another function. On a white board draw a system based on microservice architecture. #Todo Image
What is blast radius in microservices. The concept of blast radius refers to how badly the entire system will be affected if one microservice crashes or becomes unavailable.</description>
    </item>
    <item>
      <title>Microservice Communication</title>
      <link>https://suchismita-deb.github.io/post/java/interviewquestion/Microservice/InterCommunication/</link>
      <pubDate>Fri, 13 Sep 2024 22:02:37 +0530</pubDate>
      <guid>https://suchismita-deb.github.io/post/java/interviewquestion/Microservice/InterCommunication/</guid>
      <description>Ways to communicate between Microservices. Synchronous communications - It is achieved through -
Rest APIs
GraphQl
Feign using Eureka discoveries
GRPC (10 times faster than REST APIs) - developed by Google as substitute of REST with many more features.
A synchronous call means that a service waits for the response after performing a request. It is a request response pattern.
Important Features of Synchronous Communication.
Tight Coupling - It requires services to be available and responsive in real time.</description>
    </item>
    <item>
      <title>Functional Interface</title>
      <link>https://suchismita-deb.github.io/post/java/interviewquestion/functionalInterface/</link>
      <pubDate>Tue, 11 Jun 2024 08:18:15 +0530</pubDate>
      <guid>https://suchismita-deb.github.io/post/java/interviewquestion/functionalInterface/</guid>
      <description>Functional Programming using Lambda Stream. New Java 8 Features. Lambda and Functional Interface. JavaStream API. forEach() method in iterable iterface. default and static method in interface. Java date and time api.
Lambda Expression. Anonymous function that can be passed to another function as an argument. A function can be created without belonging to another class. This also enables the programming language to be as a functional programming language.
How to call or invoke the function without the name called lambda.</description>
    </item>
  </channel>
</rss>
